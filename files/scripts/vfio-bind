#!/bin/bash
## NUEVO SCRIPT PARA CONTROLAR PASSTHROUGH EN LIBVIRT
## FECHA: 9 de mayo de 2023

## VARIABLES

MAQUINA_VM=$1
BOARD_NAME=$(cat /sys/devices/virtual/dmi/id/board_name)
NUM_IOMMU=$(ls -1v /sys/kernel/iommu_groups/ | tail -n 1)
VFIO_CONF_DIR="/usr/local/etc/vfio/"
VFIO_CONF_VM_DIR="$VFIO_CONF_DIR/hook-config"
VFIO_CONF_VM_FILE="${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.yml"
VFIO_GVTG_ID="af5972fb-5530-41a7-0000-fd836204445b"
LIBVIRT_LOCAL_DIR="/home/manuel/.libvirt"
HOST_IPADDR=$(ip -f inet addr show wlp3s0 | awk '/inet / {print $2}' | cut -d"/" -f1)
VM_IPADDR=$("${VFIO_CONF_DIR}/hook-config-parse.py" "${VFIO_CONF_VM_FILE}" --get-ipaddr)

## FUNCIONES AUXILIARES
function error(){
	RED='\033[1;31m'
	NC='\033[0m'
	printf "${RED}[ERROR] $@ ${NC}\n"
}

function info(){
	BLUE='\033[1;36m'
	NC='\033[0m'
	printf "${BLUE}[INFO] $@ ${NC}\n"
}

function ayuda(){
	info "USO: $0 [nombre-de-dominio-o-vm] [-p|--prepare|-r|--release]"
}

function generar_conf(){
	cp "${VFIO_CONF_VM_DIR}/_sample.conf" "${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.conf"
	sed -i "s#replaceme#${MAQUINA_VM}#g" "${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.conf"
	sed -i "s#replace-me2#${BOARD_NAME}#g" "${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.conf"
	sed -i "s#re-placeme3#${HOSTNAME}#g" "${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.conf"

}

function hugepage_enable(){
	if [ $1 -eq 1 ]; then
		/usr/local/etc/vfio/bin/vfio-alloc-hugepages
	elif [ $1 -eq 0 ]; then
		/usr/local/etc/vfio/bin/vfio-dealloc-hugepages
	fi
}

function vdisk_enable(){
	if [ $1 -eq 1 ]; then
		/usr/local/etc/vfio/bin/libvirt-setup-vdisk "$MAQUINA_VM"
	elif [ $1 -eq 0 ]; then
		mdadm --stop /dev/md0

		# Encuentra todos los archivos montados que coinciden con el patrón
		for file in $(losetup -a | grep "$LIBVIRT_LOCAL_DIR/virtual-raid/${MAQUINA_VM}_" | cut -d ':' -f 1); do
			echo "Desmontando $file"

			# Desmonta cada archivo encontrado
			losetup -d $file
		done
	fi
}

function gvtg_enable(){
	if [ $1 -eq 1 ]; then
	        modprobe kvmgt mdev vfio-iommu-type1
		#echo 1 > "/sys/devices/pci0000:00/0000:00:02.0/$VFIO_GVTG_ID/remove"
        	echo "$VFIO_GVTG_ID" > "/sys/devices/pci0000:00/0000:00:02.0/mdev_supported_types/i915-GVTg_V5_4/create"
		#echo aaaaa
	elif [ $1 -eq 0 ]; then
		echo 1 > "/sys/devices/pci0000:00/0000:00:02.0/$VFIO_GVTG_ID/remove"
	fi
}

## COMPROBACIÓN: DOS ARGUMENTOS
if [[ $1 == "-h" ]]; then
	ayuda
	exit 1
fi


if [ $# -lt 2 ]; then
	error "Faltan argumentos."
	ayuda
	echo ""
	exit 1
fi

## COMPROBACIÓN: PREPARE O RELEASE
VFIO_BIND=-1
if [[ $2 == "--prepare" ]] || [[ $2 == "-p" ]]; then
	VFIO_BIND=1
elif [[ $2 == "--release" ]] || [[ $2 == "-r" ]]; then
	VFIO_BIND=0
elif [[ $2 == "-n" ]]; then
	generar_conf
	nano "${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.conf"
	exit 0
else
	error "Has puesto $2. Tienes que poner --prepare (-p) o --release (-r) como segundo argumento."
	ayuda
	echo ""
	exit 1
fi

## COMPROBACIÓN: NOMBRE DE MÁQUINA VIRTUAL CORRECTO
#if ! virsh --connect qemu:///system list --all --name | grep $1 >/dev/null; then
#	error "La máquina virtual $1 no existe. Prueba con:"
#	virsh list --all --name
#	exit 1
#fi

## GENERAR CONFIGURACIÓN PARA UNA NUEVA VM
if [ ! -f "${VFIO_CONF_VM_DIR}/${MAQUINA_VM}_${BOARD_NAME}.conf" ]; then
	generar_conf
fi

source "$VFIO_CONF_VM_DIR/${MAQUINA_VM}_${BOARD_NAME}.conf"

for ((i=0; i<$NUM_IOMMU+1; i++)); do
	printf -v j "%02d" $i
	IO_SEL="IOMMU_$j"

	if [[ ${!IO_SEL} == 1 ]]; then
		if [ $VFIO_BIND -eq 1 ]; then
			info "Grupo IOMMU $i entrando en modo VFIO."
			/usr/local/etc/vfio/bin/vfio-prepare $i
			sleep 0.25
		elif [ $VFIO_BIND -eq 0 ]; then
			info "Grupo IOMMU $i saliendo de modo VFIO"
			/usr/local/etc/vfio/bin/vfio-release $i
			sleep 0.25
		else
			error "Problemas al determinar el modo de funcionamiento (prepare o release)"
			exit 1
		fi
	fi
done

## COSAS A HACER EN TODAS LAS MÁQUINAS AL INICIARLAS (hugepages, governor, etc.)
info "Ejecutando otras configuraciones..."

/usr/local/etc/vfio/bin/cpumode-performance

if [[ $VFIO_HUGE == "1" ]]; then
	hugepage_enable $VFIO_BIND
fi

if [[ $VFIO_GVTG == "1" ]]; then
	gvtg_enable $VFIO_BIND
fi

if [[ $LIBVIRT_VDISK == "1" ]]; then
	vdisk_enable $VFIO_BIND
fi

#NUM_FORWARDED=$("${VFIO_CONF_DIR}/hook-config-parse.py" "${VFIO_CONF_VM_FILE}" --num-forwarded)

#while [[ $NUM_FORWARDED -gt 0 ]]; do
#	NUM_FORWARDED=$(( $NUM_FORWARDED - 1 ))
#	if [ $VFIO_BIND -eq 1 ]; then
#		PORT_HOST=$("${VFIO_CONF_DIR}/hook-config-parse.py" "${VFIO_CONF_VM_FILE}" --get-forward-host-port ${NUM_FORWARDED})
#		PORT_GUEST=$("${VFIO_CONF_DIR}/hook-config-parse.py" "${VFIO_CONF_VM_FILE}" --get-forward-guest-port ${NUM_FORWARDED})
#		PORT_INTERFACE=$("${VFIO_CONF_DIR}/hook-config-parse.py" "${VFIO_CONF_VM_FILE}" --get-forward-interface ${NUM_FORWARDED})
#		PORT_PROTOCOL=$("${VFIO_CONF_DIR}/hook-config-parse.py" "${VFIO_CONF_VM_FILE}" --get-forward-protocol ${NUM_FORWARDED})
#		iptables -t nat -I PREROUTING -p ${PORT_PROTOCOL} -d ${HOST_IPADDR} --dport ${PORT_HOST} -j DNAT --to-destination ${VM_IPADDR}:${PORT_GUEST}
#	fi
#done

iptables -I FORWARD -m state -d 192.168.122.0/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT
